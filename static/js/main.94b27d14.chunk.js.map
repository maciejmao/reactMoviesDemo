{"version":3,"sources":["logo.svg","components/Movies.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","compareYear","a","b","yearA","Year","yearB","comparison","handleErrors","response","ok","Error","statusText","Description","id","useState","plot","setPlot","useEffect","fetch","then","json","movie","Plot","catch","error","console","log","Movies","props","movies","setMovies","searching","data","Search","length","src","loader","className","alt","sort","map","index","key","Title","Poster","imdbID","App","result","phrase","setPhrase","searchInput","React","createRef","onSubmit","e","preventDefault","searchInputVal","current","value","replace","htmlFor","type","placeholder","ref","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iFAAAA,EAAOC,QAAU,IAA0B,kC,wLCIvC,SAASC,EAAYC,EAAGC,GACpB,IAAMC,EAAQF,EAAEG,KACVC,EAAQH,EAAEE,KAEZE,EAAa,EAMjB,OALIH,EAAQE,EACRC,EAAa,EACNH,EAAQE,IACfC,GAAc,GAEXA,EAIX,SAASC,EAAaC,GAClB,IAAKA,EAASC,GACV,MAAMC,MAAMF,EAASG,YAEzB,OAAOH,EAGf,IAAMI,EAAc,SAAC,GAAU,IAATC,EAAQ,EAARA,GAAQ,EACFC,mBAAS,IADP,mBACnBC,EADmB,KACbC,EADa,KAW1B,OATAC,qBAAU,WACRC,MAAM,8BAAD,OAA+BL,EAA/B,qBACFM,KAAKZ,GACLY,MAAK,SAAAX,GAAQ,OAAIA,EAASY,UAC1BD,MAAK,SAAAE,GACJL,EAAQK,EAAMC,SAEfC,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,QAC7B,CAACX,IAEF,oCACGE,IAKM,SAASY,EAAOC,GAAQ,IAAD,EAENd,mBAAS,IAFH,mBAE3Be,EAF2B,KAEnBC,EAFmB,KAgBlC,OAbAb,qBAAU,WAQN,OAPFC,MAAM,8BAAD,OAA+BU,EAAMG,UAArC,qBACFZ,KAAKZ,GACLY,MAAK,SAAAX,GAAQ,OAAIA,EAASY,UAC1BD,MAAK,SAAAa,GACJF,EAAUE,EAAKC,WAEhBV,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,MACrB,WACHM,EAAU,OAEf,CAACF,EAAMG,YAENF,EAEsB,IAAlBA,EAAOK,OAGH,yBAAKrB,GAAG,eACJ,yBAAKsB,IAAKC,IAAQC,UAAU,gBAAgBC,IAAI,YAOpD,yBAAKzB,GAAG,eAAewB,UAAU,wBAC5BR,EAAOU,KAAKvC,GAAawC,KAAK,SAACnB,EAAMoB,GAAP,OAC3B,4BAAQC,IAAKD,EAAOJ,UAAU,yHAC1B,wBAAIA,UAAU,cAAchB,EAAMsB,MAAlC,KAA2CtB,EAAMjB,KAAjD,KACA,yBAAK+B,IAAKd,EAAMuB,OAAQN,IAAI,KAC5B,kBAAC,EAAD,CAAazB,GAAIQ,EAAMwB,cAUvC,yBAAKR,UAAU,wBAAf,8CC9BGS,MArDf,WAAgB,IAcVC,EAdS,EAEejC,mBAAS,IAFxB,mBAENkC,EAFM,KAEEC,EAFF,KAGPC,EAAcC,IAAMC,YAmB1B,OAPIJ,IAEFD,EADIC,EAAOd,OAAS,EACX,kBAACP,EAAD,CAAQI,UAAWiB,IAEnB,yBAAKX,UAAU,2BAAf,8BAAoE,qCAApE,WAIT,yBAAKA,UAAU,OACX,6BAASxB,GAAG,aAAawB,UAAU,WACjC,yBAAKA,UAAU,sBACb,wBAAIA,UAAU,YAAd,qBACA,0BAAMgB,SAtBhB,SAAsBC,GACpBA,EAAEC,iBACF,IAAIC,EAAiBN,EAAYO,QAAQC,MAAMC,QAAQ,QAAS,IAC3DH,GAGLP,EAAUO,KAiBA,2BAAOnB,UAAU,QAAQuB,QAAQ,UAAjC,6DAGA,yBAAKvB,UAAU,wCACb,yBAAKA,UAAU,WACb,2BAAOxB,GAAG,SAASwB,UAAU,QAAQwB,KAAK,OAAOC,YAAY,oBAAoBC,IAAKb,KAExF,yBAAKb,UAAU,WACb,4BAAQA,UAAU,kBAAlB,eAQV,6BAASA,UAAU,WACjB,yBAAKA,UAAU,sBACZU,MCtCOiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxD,MAAK,SAAAyD,GACjCA,EAAaC,kB","file":"static/js/main.94b27d14.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import React, { useState, useEffect } from 'react';\r\nimport loader from '../logo.svg';\r\n\r\n    // array sort helper\r\n    function compareYear(a, b) {\r\n        const yearA = a.Year;\r\n        const yearB = b.Year;\r\n\r\n        let comparison = 0;\r\n        if (yearA > yearB) {\r\n            comparison = 1;\r\n        } else if (yearA < yearB) {\r\n            comparison = -1;\r\n        }\r\n        return comparison;\r\n    }\r\n\r\n    // fetch errors handler helper\r\n    function handleErrors(response) {\r\n        if (!response.ok) {\r\n            throw Error(response.statusText);\r\n        }\r\n        return response;\r\n    }\r\n\r\nconst Description = ({id}) => {\r\n    const [plot, setPlot] = useState('');\r\n    useEffect(() => {\r\n      fetch(`https://www.omdbapi.com/?i=${id}&apikey=b7c4947c`)\r\n        .then(handleErrors)\r\n        .then(response => response.json())\r\n        .then(movie => {\r\n          setPlot(movie.Plot);\r\n        })\r\n        .catch(error => console.log(error) );\r\n    }, [id]);\r\n    return (\r\n      <figcaption>\r\n        {plot}\r\n      </figcaption>\r\n    );\r\n  }\r\n\r\nexport default function Movies(props) {\r\n\r\n    const [movies, setMovies] = useState([]);\r\n    useEffect(() => {\r\n      fetch(`https://www.omdbapi.com/?s=${props.searching}&apikey=b7c4947c`)\r\n        .then(handleErrors)\r\n        .then(response => response.json())\r\n        .then(data => {\r\n          setMovies(data.Search)\r\n        })\r\n        .catch(error => console.log(error) );\r\n        return () => {\r\n            setMovies([]);\r\n        };\r\n    }, [props.searching]);\r\n\r\n    if (movies)\r\n    {\r\n        if (movies.length === 0)\r\n        {\r\n            return (\r\n                <div id=\"loaderBlock\">\r\n                    <img src={loader} className=\"result-loader\" alt=\"loader\" />\r\n                </div>\r\n            );\r\n        }\r\n        else\r\n        {\r\n            return (\r\n                <div id=\"moviesResult\" className=\"columns is-multiline\">\r\n                    {movies.sort(compareYear).map( (movie,index) => (\r\n                        <figure key={index} className=\"movie-block column is-four-fifths-mobile is-half-tablet is-half-desktop is-one-third-widescreen is-one-quarter-fullhd\">\r\n                            <h2 className=\"title is-4\">{movie.Title} ({movie.Year})</h2>\r\n                            <img src={movie.Poster} alt=\"\" />\r\n                            <Description id={movie.imdbID} />\r\n                        </figure>\r\n                    ))}\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n    else\r\n    {\r\n        return (\r\n            <div className=\"notification is-info\">\r\n                Sorry, no results for this time, try again\r\n            </div>\r\n        );\r\n    }\r\n\r\n}","import React, { useState } from 'react';\r\nimport './App.scss';\r\nimport Movies from './components/Movies';\r\n\r\nfunction App() {\r\n\r\n  const [phrase, setPhrase] = useState('');\r\n  const searchInput = React.createRef();\r\n\r\n  function handleSubmit(e) {\r\n    e.preventDefault();\r\n    let searchInputVal = searchInput.current.value.replace(/\\s*/gi, '');\r\n    if (!searchInputVal) {\r\n      return;\r\n    }\r\n    setPhrase(searchInputVal);\r\n  }\r\n\r\n  let result;\r\n  if (phrase) {\r\n    if (phrase.length > 2)\r\n    result = <Movies searching={phrase} />;\r\n    else\r\n    result = <div className=\"notification is-warning\">You need to enter at least <strong>3</strong> chars</div>;\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n        <section id=\"searchForm\" className=\"section\">\r\n          <div className=\"container is-fluid\">\r\n            <h1 className=\"subtitle\">MOVIES SEARCH APP</h1>\r\n            <form onSubmit={handleSubmit}>\r\n              <label className=\"label\" htmlFor=\"mvname\">\r\n                Find movies from IMDB base (max 10 results from this api)\r\n              </label>\r\n              <div className=\"field has-addons has-addons-centered\">\r\n                <div className=\"control\">\r\n                  <input id=\"mvname\" className=\"input\" type=\"text\" placeholder=\"enter phrase here\" ref={searchInput} />\r\n                </div>\r\n                <div className=\"control\">\r\n                  <button className=\"button is-info\">\r\n                    Search\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </form>\r\n          </div>\r\n        </section>\r\n        <section className=\"section\">\r\n          <div className=\"container is-fluid\">\r\n            {result}\r\n          </div>\r\n        </section>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}